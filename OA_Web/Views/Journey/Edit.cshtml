@model OA_Service.ViewModels.JourneyViewModel

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>



<div class="container">
    <h4>Edit the journey</h4>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <form asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="Time" class="control-label"></label>
                    <input asp-for="Time" class="form-control" />
                    <span asp-validation-for="Time" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Date" class="control-label"></label>
                    <input asp-for="Date" class="form-control" />
                    <span asp-validation-for="Date" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Passengers_Number" class="control-label"></label>
                    <input asp-for="Passengers_Number" class="form-control" />
                    <span asp-validation-for="Passengers_Number" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="From" class="control-label"></label>
                    <div class="d-flex">
                        <div style="width: -webkit-fill-available;">
                            <input asp-for="From" class="form-control" id="fromLocation" />
                        </div>
                        <div class="ml-2">
                            <button type="button" class="" data-toggle="modal" data-target="#myModal" data-clicked="yes" onclick="map1Clicked()" id="map1"><i class="fas fa-map-marker-alt"></i></button>
                        </div>

                    </div>

                    <span asp-validation-for="From" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="To" class="control-label"></label>
                    <div class="d-flex">
                        <div style="width: -webkit-fill-available;">
                            <input asp-for="To" class="form-control" id="toLocation" />
                        </div>
                        <div class="ml-2">
                            <button type="button" class="" data-toggle="modal" data-target="#myModal" data-clicked="no" onclick="map2Clicked()" id="map2"><i class="fas fa-map-marker-alt"></i></button>
                        </div>
                        <span asp-validation-for="To" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-group" hidden>
                    <label asp-for="Form_Long" class="control-label"></label>
                    <input asp-for="Form_Long" class="form-control" id="longitude" />
                    <span asp-validation-for="Form_Long" class="text-danger"></span>
                </div>
                <div class="form-group" hidden>
                    <label asp-for="Form_Lat" class="control-label"></label>
                    <input asp-for="Form_Lat" class="form-control" id="latitude" />
                    <span asp-validation-for="Form_Lat" class="text-danger"></span>
                </div>
                <div class="form-group" hidden>
                    <label asp-for="To_Long" class="control-label"></label>
                    <input asp-for="To_Long" class="form-control" id="longitude2" />
                    <span asp-validation-for="To_Long" class="text-danger"></span>
                </div>
                <div class="form-group" hidden>
                    <label asp-for="To_Lat" class="control-label"></label>
                    <input asp-for="To_Lat" class="form-control" id="latitude2" />
                    <span asp-validation-for="To_Lat" class="text-danger"></span>
                </div>


                <div class="form-group">
                    <label asp-for="Desc" class="control-label"></label>
                    <input asp-for="Desc" class="form-control" />
                    <span asp-validation-for="Desc" class="text-danger"></span>
                </div>
                <input type="hidden" asp-for="Car_Owner_Id" />
                <div class="form-group">
                    <input type="submit" value="Edit" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>
<div hidden>
    Current Location is :  <input type="text" class="form-control" id="pac-input">
</div>



<!-- Modal -->
<div id="myModal" class="modal fade" role="dialog" style="overflow:hidden">
    <div class="modal-dialog modal-lg" style="max-width: 1164px">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header" style="display:block">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Modal Header</h4>
            </div>
            <div class="modal-body">
                <div class="ForMap" style="height: 500px;">
                    <div id="map" style="height: 500px;">

                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Ok</button>
            </div>
        </div>

    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
      
        $("#pac-input").focusin(function () {
            $(this).val('');
        });
        $('#latitude').val('');
        $('#longitude').val('');
       
        // This example adds a search box to a map, using the Google Place Autocomplete
        // feature. People can enter geographical searches. The search box will return a
        // pick list containing a mix of places and predicted search terms.
        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
        function initAutocomplete() {

            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 24.740691, lng: 46.6528521 },
                zoom: 13,
                mapTypeId: 'roadmap'
            });
            // move pin and current location
            infoWindow = new google.maps.InfoWindow;

            geocoder = new google.maps.Geocoder();
            if (navigator.geolocation) {
                let markers = [];
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    map.setCenter(pos);
                    var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(pos),
                        map: map,
                        draggable: true,
                        title: 'موقعك الحالي'
                    });
                    //
                    markers.push(marker);

                    marker.addListener('click', function () {
                        geocodeLatLng(geocoder, map, infoWindow, marker);
                        // alert("ffffffffff");
                    });
                    // to get current position address on load
                    google.maps.event.trigger(marker, 'click');
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation

                handleLocationError(false, infoWindow, map.getCenter());
            }
            var geocoder = new google.maps.Geocoder();
            google.maps.event.addListener(map, 'click', function (event) {
                SelectedLatLng = event.latLng;
                geocoder.geocode({
                    'latLng': event.latLng
                }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        if (results[0]) {
                            deleteMarkers();
                            addMarkerRunTime(event.latLng);
                            SelectedLocation = results[0].formatted_address;
                            console.log(results[0].formatted_address);
                            splitLatLng(String(event.latLng));
                            $("#pac-input").val(results[0].formatted_address);
                            if ($("#map1").attr("data-clicked") == "yes") {
                                $("#fromLocation").val(results[0].formatted_address);

                            }
                            else {
                                $("#toLocation").val(results[0].formatted_address);

                            }
                            //alert("bif")
                            //alert($("#map1").data("clicked") + $("#map2").data("clicked"))
                        }
                    }
                });
            });
            function geocodeLatLng(geocoder, map, infowindow, markerCurrent) {
                var latlng = { lat: markerCurrent.position.lat(), lng: markerCurrent.position.lng() };
                /* $('#branch-latLng').val("("+markerCurrent.position.lat() +","+markerCurrent.position.lng()+")");*/
                $('#latitude').val(markerCurrent.position.lat());
                $('#longitude').val(markerCurrent.position.lng());
                geocoder.geocode({ 'location': latlng }, function (results, status) {
                    if (status === 'OK') {
                        if (results[0]) {
                            map.setZoom(8);
                            var marker = new google.maps.Marker({
                                position: latlng,
                                draggable: true,
                                map: map
                            });
                            markers.push(marker);
                            infowindow.setContent(results[0].formatted_address);
                            SelectedLocation = results[0].formatted_address;
                            $("#pac-input").val(results[0].formatted_address);
                            //if ($("#map1").attr("data-clicked") == "yes") {
                            //    $("#fromLocation").val(results[0].formatted_address);

                            //}
                            //else {
                            //    $("#toLocation").val(results[0].formatted_address);

                            //}
                            infowindow.open(map, marker);
                        } else {
                            window.alert('No results found');
                        }
                    } else {
                        window.alert('Geocoder failed due to: ' + status);
                    }
                });
                SelectedLatLng = (markerCurrent.position.lat(), markerCurrent.position.lng());
            }
            function addMarkerRunTime(location) {
                var marker = new google.maps.Marker({
                    position: location,
                    draggable: true,
                    map: map
                });
                markers.push(marker);
            }
            function setMapOnAll(map) {
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(map);
                }
            }
            function clearMarkers() {
                setMapOnAll(null);
            }
            function deleteMarkers() {
                clearMarkers();
                markers = [];
            }
            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            $("#pac-input").val("أبحث هنا ");
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });
            let markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();
                if (places.length == 0) {
                    return;
                }
                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];
                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(100, 100),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };
                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));
                    if ($("#map1").attr("data-clicked") == "yes") {
                        $('#latitude').val(place.geometry.location.lat());
                        $('#longitude').val(place.geometry.location.lng());

                    }
                    else {
                        $('#latitude2').val(place.geometry.location.lat());
                        $('#longitude2').val(place.geometry.location.lng());

                    }

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }
        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
        }
        function splitLatLng(latLng) {
            var newString = latLng.substring(0, latLng.length - 1);
            var newString2 = newString.substring(1);
            var trainindIdArray = newString2.split(',');
            var lat = trainindIdArray[0];
            var Lng = trainindIdArray[1];
            if ($("#map1").attr("data-clicked") == "yes") {
                $("#latitude").val(lat);
                $("#longitude").val(Lng);
            }
            else {
                $("#latitude2").val(lat);
                $("#longitude2").val(Lng);
            }
        }
    </script>

    <script>

        function map2Clicked() {
            $("#map2").attr("data-clicked", "yes");
            $("#map1").attr("data-clicked", "no")

            //alert("you clicked in buttun 2")
        }
        function map1Clicked() {
            $("#map2").attr("data-clicked", "no");
            $("#map1").attr("data-clicked", "yes")

            //alert("you clicked in buttun 1")
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAtxTjUI11VOLaFVnOVYd5cYW3o0e0_cxQ&callback=initAutocomplete&libraries=places"></script>
}